<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏人生</title>
      <link href="/2019/12/22/%E9%98%85%E8%AF%BB/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
      <url>/2019/12/22/%E9%98%85%E8%AF%BB/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>《NO GAME NO LIFE 游戏人生》是<a href="https://baike.baidu.com/item/%E6%A6%8E%E5%AE%AB%E7%A5%90" target="_blank" rel="noopener">榎宫祐</a>著作并负责插画的轻小说，可以所作智斗吧。</p><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>我最近感觉是中了智斗小说的毒了，感觉看完《实教》之后，还是放不下，所以也把《游戏人生》给追完了。当读到一半的时候，感觉有点要崩溃的感觉，不过，我向来是有始有终，所以也就硬着头皮上了。书中的作者感觉脑回路和我对不上，有些发言感觉不正常，感觉不止【空白】是经常呆在家里的样子。对于【为过去付出代价】这一章，里面的词语略显粗俗（全文几乎都是乳），这个粗俗不恰到好处，让人摸不着头脑。</p><p>如果想了解这个，我认为还是看动画吧，动画做的不错，但是按照后面的情节发展，感觉是不会再动画的原因吧。感觉要读点其它类型的书了，我的价值观。。。下期读《三体》吧</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经典数字图像复原</title>
      <link href="/2019/12/16/Digital-Image-Process/Digital-Image-Restoration-Classical/"/>
      <url>/2019/12/16/Digital-Image-Process/Digital-Image-Restoration-Classical/</url>
      
        <content type="html"><![CDATA[<h4 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h4><p>​    图像复原指的是原始图像从退化图像中复原。由于很多图像在获取和处理的过程中发生退化，所以图像复原是人们所期望的结果。在这一章，我们将通过讨论经典的图像处理思想来走进图像复原的天地。这些想法关注的是经过滤波和加性噪声所污染的图像，方法通常有广义逆逆滤波器、约束最小二乘方滤波、最小均方误差(维纳)滤波、卡尔曼和最大后验技术等等。</p><h4 id="OVERVIEW"><a href="#OVERVIEW" class="headerlink" title="OVERVIEW"></a>OVERVIEW</h4><p>​    光学和电子失真使图像发生退化。例如，在使用散焦镜头或者在拍摄运动的很快的物体时，图像会产生模糊，同样，图片在模拟传输的过程中，也会收到加性噪声的损坏。在许多运用中，这些错误限制了获得的数据的作用。因此，减少图像退化的方法是值得研究的。一种能克服这种错误的方法是用更好的镜头，用能够减少模糊的平稳成像系统和能够减弱噪声的更稳定的传输系统。不幸的是，许多运用承受不起系统变换的复杂性和开支。在这种情况下，系统设计者需要把精力集中在数字图像复原领域。</p><p>​    数字图像复原在图像获取之后减少图像的畸变。可以解决许多的失真情况。但是，要设计一个合适的方法，通常需要遵循三个步骤</p>]]></content>
      
      
      <categories>
          
          <category> Digital-Image-Process </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到实力主义至上教室</title>
      <link href="/2019/11/22/%E9%98%85%E8%AF%BB/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E5%AE%9E%E5%8A%9B%E4%B8%BB%E4%B9%89%E8%87%B3%E4%B8%8A%E6%95%99%E5%AE%A4/"/>
      <url>/2019/11/22/%E9%98%85%E8%AF%BB/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E5%AE%9E%E5%8A%9B%E4%B8%BB%E4%B9%89%E8%87%B3%E4%B8%8A%E6%95%99%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>《欢迎来到实力至上主义的教室》是轻小说家<a href="https://baike.baidu.com/item/%E8%A1%A3%E7%AC%A0%E5%BD%B0%E6%A2%A7/19309580" target="_blank" rel="noopener">衣笠彰梧</a>著作，这部轻小说定义为智斗、校园、恋爱类型的小说，听说已经算是校园智斗中的巅峰制作。单单是智斗的话，听说死亡笔记不错，但是结局不太友好。</p><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>因为是日译，所以心理情节描写虽然细腻，但是言辞不够华丽，不过全凭意淫，华不华丽已经不重要了。对于心理描写，小说中巧用第二人称的描写，使读者能够身临其境，体验主角的思考方式，同时又能换角度思考，从配角中感受不同的想法。这种多角度的写法虽然刚开始使我感到有点别扭，但是后来慢慢读起来才感受到了其中的乐趣，使我不亦乐乎！</p><p>但是，单单从智斗角度上来看，感觉大多数的智斗小说都是等到事情发生之后，才一下子揭示事情发生的经过，然后说主角已经这也做了，那个也做了，只是没有写出来罢了。在这里我认为智斗小说的关键在于作者能否把握好埋伏笔的“量”，伏笔埋太多，使读者事先就料到小说的故事情节发展，那就索然无味，伏比埋太少，感觉所有的都是背地里操作，最后再来一个“吓一跳”。所以小说的伏笔就是“坑”，得好好挖。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>study</title>
      <link href="/2019/10/20/homework/homework/"/>
      <url>/2019/10/20/homework/homework/</url>
      
        <content type="html"><![CDATA[<h4 id="1、本科课程资料"><a href="#1、本科课程资料" class="headerlink" title="1、本科课程资料"></a>1、本科课程资料</h4><p><a href="https://pan.baidu.com/s/1SSFG2D2v6o5uCmpbLS6DoQ&amp;shfl=sharepset" target="_blank" rel="noopener">https://pan.baidu.com/s/1SSFG2D2v6o5uCmpbLS6DoQ&amp;shfl=sharepset</a></p><h4 id="2、附"><a href="#2、附" class="headerlink" title="2、附"></a>2、附</h4><h5 id="1、微机原理实验代码仓库：https-github-com-Yangxiu123321-microwave-89c51-git"><a href="#1、微机原理实验代码仓库：https-github-com-Yangxiu123321-microwave-89c51-git" class="headerlink" title="1、微机原理实验代码仓库：https://github.com/Yangxiu123321/microwave_89c51.git"></a>1、微机原理实验代码仓库：<a href="https://github.com/Yangxiu123321/microwave_89c51.git" target="_blank" rel="noopener">https://github.com/Yangxiu123321/microwave_89c51.git</a></h5>]]></content>
      
      
      <categories>
          
          <category> homework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码阅读</title>
      <link href="/2019/06/04/SLAM/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2019/06/04/SLAM/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文档</title>
      <link href="/2019/06/04/SLAM/%E6%96%87%E6%A1%A3/"/>
      <url>/2019/06/04/SLAM/%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>环境配置</title>
      <link href="/2019/06/04/SLAM/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/04/SLAM/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>caffe安装与训练</title>
      <link href="/2018/12/14/caffe/%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%AD%E7%BB%83/"/>
      <url>/2018/12/14/caffe/%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="caffe训练模型"><a href="#caffe训练模型" class="headerlink" title="caffe训练模型"></a>caffe训练模型</h1><p>写本教程的目的在于快速部署，节省工作时间。</p><h4 id="一、安装caffe"><a href="#一、安装caffe" class="headerlink" title="一、安装caffe"></a>一、安装caffe</h4><h5 id="1、版本介绍"><a href="#1、版本介绍" class="headerlink" title="1、版本介绍"></a>1、版本介绍</h5><p>caffe目前有三个版本,分别为：</p><p>1、微软的版本：</p><p>这个版本支持在windows上编译，如果你的开发平台在windows上的话，建议你使用这个版本，不过注意在搭建开发环境的时候一定要使用他推荐的不然会有许多问题。</p><p>2、原生版本</p><p>3、intel 版本</p><p>这个版本是经过intel的指令集加速的最优版本，运行速度会快一点</p><h5 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h5><p>这个网上教程很多，可以自行google。这里附上要安装的依赖库，方便复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure><h4 id="二、caffe训练模型"><a href="#二、caffe训练模型" class="headerlink" title="二、caffe训练模型"></a>二、caffe训练模型</h4><h5 id="1、下载工具包"><a href="#1、下载工具包" class="headerlink" title="1、下载工具包"></a>1、下载工具包</h5><p>我把需要用到的工具上传到了github，克隆到你的工作目录(我以我的/home/action/code/caffe)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/action/code/caffe</span><br></pre></td></tr></table></figure><p>克隆完成之后，会有几个文件，我分别来介绍他们。</p><h5 id="2、制作数据集"><a href="#2、制作数据集" class="headerlink" title="2、制作数据集"></a>2、制作数据集</h5><p>把你要训练的数据复制到caffe_tool目录下，复制完成后的路径如下</p><p>caffe_tool/gui/class1/</p><p>caffe_tool/gui/class2/</p><p>.</p><p>caffe_tool/gui/classn/</p><p>classn目录下为你要训练的图片。接下来到caffe_tool目录下修改<strong>create_list.py</strong>，这个文件可以把所有图片按类别加上标签号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把下面的语句改为你的gui目录下的类别文件夹名，并加上对应的标签。</span></span><br><span class="line">class_names_to_ids = &#123;<span class="string">'class1'</span>: <span class="number">0</span>, <span class="string">'class2'</span>: <span class="number">1</span>,<span class="string">'class3'</span>: <span class="number">2</span>, <span class="string">'class4'</span>: <span class="number">3</span>,<span class="string">'class5'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 数据目录文件夹,注意要‘/’不能省略。</span></span><br><span class="line">data_dir = <span class="string">'gui/'</span></span><br><span class="line"><span class="comment"># 修改完成之后运行</span></span><br><span class="line">python create_list.py</span><br><span class="line"><span class="comment"># 在目录(caffe_tool/data)目录下可以看到list.txt,前面为路径名，后面为标签号。</span></span><br></pre></td></tr></table></figure><p>修改<strong>create_train_test.py</strong>，这个文件可以把list.txt中的行数打乱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面表示把list.txt打乱后的文件取40个样本作为验证集。</span></span><br><span class="line">_NUM_VALIDATION = <span class="number">40</span></span><br><span class="line"><span class="comment"># 产生训练文件与测试文件</span></span><br><span class="line">python create_train_test.py</span><br></pre></td></tr></table></figure><p>因为caffe训练的时候的数据文件为lmdb格式，所以我们要使用<strong>create_imagenet.sh</strong>改变一下数据的格式。下面是我加了注释的全部内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"><span class="comment"># Create the imagenet lmdb inputs</span></span><br><span class="line"><span class="comment"># N.B. set the path to the imagenet train + val data dirs</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># LMDB的文件目录</span></span><br><span class="line">LMDB=lmdb</span><br><span class="line"><span class="comment"># .txt的文件目录</span></span><br><span class="line">DATA=data</span><br><span class="line"><span class="comment"># 编译后的caffe工具文件夹</span></span><br><span class="line">TOOLS=/home/action/code/caffe/caffe-1.0/build/tools</span><br><span class="line"></span><br><span class="line">TRAIN_DATA_ROOT=/home/action/code/caffe/caffe_tool/guai/</span><br><span class="line">VAL_DATA_ROOT=/home/action/code/caffe/caffe_tool/guai/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set RESIZE=true to resize the images to 227x227. Leave as false if images have</span></span><br><span class="line"><span class="comment"># already been resized using another tool.</span></span><br><span class="line">RESIZE=<span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$RESIZE</span>; <span class="keyword">then</span></span><br><span class="line">  RESIZE_HEIGHT=227</span><br><span class="line">  RESIZE_WIDTH=227</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  RESIZE_HEIGHT=0</span><br><span class="line">  RESIZE_WIDTH=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$TRAIN_DATA_ROOT</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Error: TRAIN_DATA_ROOT is not a path to a directory: <span class="variable">$TRAIN_DATA_ROOT</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Set the TRAIN_DATA_ROOT variable in create_imagenet.sh to the path"</span> \</span><br><span class="line">       <span class="string">"where the ImageNet training data is stored."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$VAL_DATA_ROOT</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Error: VAL_DATA_ROOT is not a path to a directory: <span class="variable">$VAL_DATA_ROOT</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Set the VAL_DATA_ROOT variable in create_imagenet.sh to the path"</span> \</span><br><span class="line">       <span class="string">"where the ImageNet validation data is stored."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Creating train lmdb..."</span></span><br><span class="line"></span><br><span class="line">GLOG_logtostderr=1 <span class="variable">$TOOLS</span>/convert_imageset \</span><br><span class="line">    --resize_height=<span class="variable">$RESIZE_HEIGHT</span> \</span><br><span class="line">    --resize_width=<span class="variable">$RESIZE_WIDTH</span> \</span><br><span class="line">    --shuffle \</span><br><span class="line">    <span class="variable">$TRAIN_DATA_ROOT</span> \</span><br><span class="line">    <span class="variable">$DATA</span>/list_train.txt \</span><br><span class="line">    <span class="variable">$LMDB</span>/train_lmdb</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Creating val lmdb..."</span></span><br><span class="line"></span><br><span class="line">GLOG_logtostderr=1 <span class="variable">$TOOLS</span>/convert_imageset \</span><br><span class="line">    --resize_height=<span class="variable">$RESIZE_HEIGHT</span> \</span><br><span class="line">    --resize_width=<span class="variable">$RESIZE_WIDTH</span> \</span><br><span class="line">    --shuffle \</span><br><span class="line">    <span class="variable">$VAL_DATA_ROOT</span> \</span><br><span class="line">    <span class="variable">$DATA</span>/list_val.txt \</span><br><span class="line">    <span class="variable">$LMDB</span>/val_lmdb</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Done."</span></span><br></pre></td></tr></table></figure><p>生成图像的均值文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"><span class="comment"># Compute the mean image from the imagenet training lmdb</span></span><br><span class="line"><span class="comment"># N.B. this is available in data/ilsvrc12</span></span><br><span class="line"></span><br><span class="line">LMDB=lmdb</span><br><span class="line">DATA=data</span><br><span class="line">TOOLS=/home/action/code/caffe/caffe-1.0/build/tools</span><br><span class="line"></span><br><span class="line"><span class="variable">$TOOLS</span>/compute_image_mean <span class="variable">$LMDB</span>/train_lmdb \</span><br><span class="line">  <span class="variable">$DATA</span>/imagenet_mean.binaryproto</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Done."</span></span><br></pre></td></tr></table></figure><p>训练，修改<strong>train_val.prototxt</strong>文件，主要修改类别与数据源。修改<strong>solver.prototxt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">/home/action/code/caffe/caffe-1.0/build/tools/caffe train -solver model/solver.prototxt</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">/home/action/code/caffe/caffe-1.0/bui/examples/cpp_classification/classification ./model/deploy.prototxt ./caffenet_train_iter_63.caffemodel .data/imagenet_mean.binaryproto  ./test.txt ./first.BMP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openVINO的常用网址</title>
      <link href="/2018/11/08/openVINO/openVINO%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/"/>
      <url>/2018/11/08/openVINO/openVINO%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>1、openVINO官网</p><p><a href="https://software.intel.com/openvino-toolkit" target="_blank" rel="noopener">https://software.intel.com/openvino-toolkit</a></p><p>2、movidius神经网络加速器</p><p><a href="https://www.movidius.com/" target="_blank" rel="noopener">https://www.movidius.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> openVINO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>movidius指南</title>
      <link href="/2018/11/08/openVINO/movidius%E6%8C%87%E5%8D%97/"/>
      <url>/2018/11/08/openVINO/movidius%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>1、使用前检查movidius NSC所支持的USB，如果USB3.0插在USB3.1上，型号可能对不上，导致SDK找不到设备。</p>]]></content>
      
      
      <categories>
          
          <category> openVINO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cmake配置文件</title>
      <link href="/2018/11/08/cmake/cmake%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/11/08/cmake/cmake%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="基本的同级目录包含文件"><a href="#基本的同级目录包含文件" class="headerlink" title="基本的同级目录包含文件"></a>基本的同级目录包含文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Project Name</span></span><br><span class="line"><span class="keyword">set</span>(PROJ_NAME CV)</span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11"</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line">FILE(GLOB HEADER_LIST <span class="string">"$&#123;CMAKE_SOURCE_DIR&#125;/src/*.h"</span>)</span><br><span class="line">FILE(GLOB SOURCE_LIST <span class="string">"$&#123;CMAKE_SOURCE_DIR&#125;/src/*.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> <span class="variable">$&#123;SOURCE_LIST&#125;</span> <span class="variable">$&#123;HEADER_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">set_property</span>(DIRECTORY <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span> PROPERTY VS_STARTUP_PROJECT <span class="variable">$&#123;PROJ_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenCV</span></span><br><span class="line"><span class="keyword">set</span> (OpenCV_DIR <span class="string">"C:/ST42Data/Code/opencv3Src/install/x86/vc15/lib"</span>) </span><br><span class="line"><span class="comment"># 更改此路径为OpenCVConfig.cmake的路径（库目录）</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(OpenCV_FOUND)</span><br><span class="line">  <span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">  <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Camera Driver</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/MindVisionAPI/<span class="keyword">Include</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/MindVisionAPI/Library/MVCAMSDK_X64.lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别为c++代码</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> PROPERTIES LINKER_LANGUAGE CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多核处理</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJ_NAME&#125;</span> PROPERTIES COMPILE_FLAGS <span class="string">"/MP"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Administrator</span></span><br><span class="line"><span class="comment">#set_target_properties($&#123;PROJ_NAME&#125; PROPERTIES LINK_FLAGS "/level='requireAdministrator'") </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unicode编码</span></span><br><span class="line"><span class="keyword">Add_Definitions</span>(-DUNICODE -D_UNICODE)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow model中object_dection模型的训练</title>
      <link href="/2018/10/05/tensorflow/tensorflow-model%E4%B8%ADobject-dection%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%AD%E7%BB%83/"/>
      <url>/2018/10/05/tensorflow/tensorflow-model%E4%B8%ADobject-dection%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><h4 id="1、相关依赖的下载"><a href="#1、相关依赖的下载" class="headerlink" title="1、相关依赖的下载"></a>1、相关依赖的下载</h4><p>a、克隆tensorflow的model<br>[model]: <a href="https://github.com/tensorflow/models" target="_blank" rel="noopener">https://github.com/tensorflow/models</a></p><p>b、到下面的GitHub上下载相关的python脚本</p><ul><li><p><a href="https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10/blob/master/xml_to_csv.py" target="_blank" rel="noopener">xml_to_csv.py</a></p></li><li><p><a href="https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10/blob/master/generate_tfrecord.py" target="_blank" rel="noopener">generate_tfrecord.py</a></p></li><li><p><a href="https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10/blob/master/Object_detection_image.py" target="_blank" rel="noopener">Object_detection_image.py</a></p></li><li><p><a href="https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10/blob/master/Object_detection_video.py" target="_blank" rel="noopener">Object_detection_video.py</a></p></li><li><p><a href="https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10/blob/master/Object_detection_webcam.py" target="_blank" rel="noopener">Object_detection_webcam.py</a></p><p>上面的脚本在以后的数据处理和模型预测中有用。</p></li></ul><p>c、到model zoon下载相关的模型。model zoon的连接可以在g3doc/detection_model_zoo.md下获得。下载之后将模型文件解压到object_dection目录。</p><p>d、下载<a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">LabelImg GitHub link</a>，这个工具用来生成图片的XML文件。</p><h3 id="2、文件目录配置"><a href="#2、文件目录配置" class="headerlink" title="2、文件目录配置"></a>2、文件目录配置</h3><p>​    进入\models\research\object_detection目录中，建立training文件夹、images/train文件夹、images\test文件夹、inference_graph文件夹。</p><p>a、images/train &amp;&amp; images/test</p><p>train下面放训练图片，test下面放测试图片。</p><p>b、training/labelmap.pbtxt</p><p>training下面建立一个叫作labelmap.pbtxt的文件。这个文件的作用是声明物体的类别，他的文件格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">  id: <span class="number">1</span></span><br><span class="line">  name: 'raccoon'</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">  id: <span class="number">2</span></span><br><span class="line">  name: 'kabuqoi'</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">item &#123;</span><br><span class="line">  id: n</span><br><span class="line">  name: 'kab'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他的id编号0为预留的，所以从1开始。name代表每一个id的不同名称，用于在实际工程中的类别显示。</p><p>c、training/xxxxx.config</p><p>次文件是模型的配置文件，当你在model zoon下载模型之后，你可以在object_detection\samples\configs目录下找到对应的配置文件。eg:sd_mobilenet_v1_coco模型你就可以选择ssd_mobilenet_v1_pets.config作为该模型的配置文件。下面贴出次模型的配置，其他模型可以参考这个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、分类的种类数目</span></span><br><span class="line">num_classes: <span class="number">1</span></span><br><span class="line"><span class="comment">// 2、model zoon下载模型文件的目录</span></span><br><span class="line">fine_tune_checkpoint: <span class="string">"E:\\tensorflow\\models\\android_Pikachu\\models\\research\\object_detection\\ssd_mobilenet_v1_coco_2018_01_28\\model.ckpt"</span></span><br><span class="line"><span class="comment">// 3、输入数据</span></span><br><span class="line">train_input_reader: &#123;</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: <span class="string">"E:\\tensorflow\\models\\android_Pikachu\\models\\research\\object_detection\\train.record"</span></span><br><span class="line">  &#125;</span><br><span class="line">  label_map_path: <span class="string">"E:\\tensorflow\\models\\android_Pikachu\\models\\research\\object_detection\\training\labelmap.pbtxt"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4、测试数据</span></span><br><span class="line">eval_config: &#123;</span><br><span class="line">  metrics_set: <span class="string">"coco_detection_metrics"</span></span><br><span class="line">  num_examples: <span class="number">40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval_input_reader: &#123;</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: <span class="string">"E:\\tensorflow\\models\\android_Pikachu\\models\\research\\object_detection\\test.record"</span></span><br><span class="line">  &#125;</span><br><span class="line">  label_map_path: <span class="string">"E:\\tensorflow\\models\\android_Pikachu\\models\\research\\object_detection\\training\labelmap.pbtxt"</span></span><br><span class="line">  shuffle: <span class="literal">false</span></span><br><span class="line">  num_readers: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的record文件的生成后面有讲。</p><p>d、inference_graph放置训练好的模型。</p><h4 id="3、生成准备文件"><a href="#3、生成准备文件" class="headerlink" title="3、生成准备文件"></a>3、生成准备文件</h4><p>a、环境配置</p><p>打开anaconda，进入装有tensorflow的虚拟环境中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd 到research/</span><br><span class="line">1、编译protobuf文件</span><br><span class="line"># From tensorflow/models/research/</span><br><span class="line">protoc --python_out=. .\object_detection\protos\anchor_generator.proto .\object_detection\protos\argmax_matcher.proto .\object_detection\protos\bipartite_matcher.proto .\object_detection\protos\box_coder.proto .\object_detection\protos\box_predictor.proto .\object_detection\protos\eval.proto .\object_detection\protos\faster_rcnn.proto .\object_detection\protos\faster_rcnn_box_coder.proto .\object_detection\protos\grid_anchor_generator.proto .\object_detection\protos\hyperparams.proto .\object_detection\protos\image_resizer.proto .\object_detection\protos\input_reader.proto .\object_detection\protos\losses.proto .\object_detection\protos\matcher.proto .\object_detection\protos\mean_stddev_box_coder.proto .\object_detection\protos\model.proto .\object_detection\protos\optimizer.proto .\object_detection\protos\pipeline.proto .\object_detection\protos\post_processing.proto .\object_detection\protos\preprocessor.proto .\object_detection\protos\region_similarity_calculator.proto .\object_detection\protos\square_box_coder.proto .\object_detection\protos\ssd.proto .\object_detection\protos\ssd_anchor_generator.proto .\object_detection\protos\string_int_label_map.proto .\object_detection\protos\train.proto .\object_detection\protos\keypoint_box_coder.proto .\object_detection\protos\multiscale_anchor_generator.proto .\object_detection\protos\graph_rewriter.proto</span><br><span class="line">2、设置python的路径</span><br><span class="line">set PYTHONPATH=E:\tensorflow\models\android_Pikachu\models\research\object_detection;</span><br><span class="line">E:\tensorflow\models\android_Pikachu\models\research;</span><br><span class="line">E:\tensorflow\models\android_Pikachu\models\research\slim;</span><br><span class="line">E:\tensorflow\models\android_Pikachu\models</span><br></pre></td></tr></table></figure><p>b、构建record文件</p><p>用labelImg生成每张图片的XML文件，XML文件的目录与图片的目录一致。</p><p>在object-dection目录执行下面的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python xml_to_csv.py</span><br><span class="line"><span class="comment"># 这条命令将会在images目录下生成相关的csv文件</span></span><br></pre></td></tr></table></figure><p>修改generate_tfrecord.py下面的部分，有几类就改成多少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TO-DO replace this with label map</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_text_to_int</span><span class="params">(row_label)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row_label == <span class="string">'nine'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> row_label == <span class="string">'ten'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> row_label == <span class="string">'jack'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> row_label == <span class="string">'queen'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> row_label == <span class="string">'king'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> row_label == <span class="string">'ace'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>运行下面的代码，将会生成record文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python generate_tfrecord.py --csv_input=images\train_labels.csv --image_dir=images\train --output_path=train.record</span><br><span class="line"></span><br><span class="line">python generate_tfrecord.py --csv_input=images\test_labels.csv --image_dir=images\test --output_path=test.record</span><br></pre></td></tr></table></figure><h3 id="二、模型训练"><a href="#二、模型训练" class="headerlink" title="二、模型训练"></a>二、模型训练</h3><h4 id="1、训练"><a href="#1、训练" class="headerlink" title="1、训练"></a>1、训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_mobilenet_v1_pets.config</span><br></pre></td></tr></table></figure><p>在training目录下会产生ckpt的参数文件，使用下面的命令来导出冻结参数与计算图的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/ssd_mobilenet_v1_pets.config --trained_checkpoint_prefix training/model.ckpt-XXXX --output_directory inference_graph</span><br></pre></td></tr></table></figure><p>在inference_graph目录下找到冻结图的文件。</p><h4 id="2、tensorboard"><a href="#2、tensorboard" class="headerlink" title="2、tensorboard"></a>2、tensorboard</h4><p>用tensroboard可以观察训练的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=training</span><br></pre></td></tr></table></figure><h3 id="三、模型测试"><a href="#三、模型测试" class="headerlink" title="三、模型测试"></a>三、模型测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Object_detection_image.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vs2017上运行第一个tensorflow程序</title>
      <link href="/2018/10/05/tensorflow/vs2017%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AAtensorflow%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/10/05/tensorflow/vs2017%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AAtensorflow%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="1、文件包含"><a href="#1、文件包含" class="headerlink" title="1、文件包含"></a>1、文件包含</h4><p>用vs2017建立工程就不说了，记得是Release版本的。</p><p>a、头文件包含</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build\Release</span><br><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build\external\nsync\<span class="keyword">public</span></span><br><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build\protobuf\src\protobuf\src</span><br><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build</span><br><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build\external\eigen_archive</span><br><span class="line">D:\programFiles\tensorflow</span><br><span class="line">D:\programFiles\tensorflow\third_party\eigen3</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp</span><br></pre></td></tr></table></figure><p>b、库文件目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\programFiles\tensorflow\tensorflow\contrib\cmake\build\Release</span><br></pre></td></tr></table></figure><p>c、库文件包含</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">tensorflow.lib</span><br><span class="line">tensorflow_static.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\algorithm\Release\absl_algorithm.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\base\Release\absl_base.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\base\Release\absl_dynamic_annotations.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\base\Release\absl_malloc_internal.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\base\Release\absl_spinlock_wait.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\base\Release\absl_throw_delegate.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\container\Release\absl_container.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\container\Release\test_instance_tracker_lib.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_debugging.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_examine_stack.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_failure_signal_handler.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_leak_check.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_stacktrace.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_stack_consumption.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\debugging\Release\absl_symbolize.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\memory\Release\absl_memory.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\meta\Release\absl_meta.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\numeric\Release\absl_int128.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\numeric\Release\absl_numeric.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\strings\Release\absl_strings.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\strings\Release\absl_str_format.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\strings\Release\str_format_extension_internal.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\strings\Release\str_format_internal.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\synchronization\Release\absl_synchronization.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\time\Release\absl_time.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_any.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_bad_any_cast.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_bad_optional_access.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_optional.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_span.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\types\Release\absl_variant.lib</span><br><span class="line">D:\programFiles\tensorflow\abseil-cpp\build\absl\utility\Release\absl_utility.lib</span><br></pre></td></tr></table></figure><p>基本上是abseil的库文件，去死。</p><p>记得把tensorflow.dll文件拷贝到工程的文件目录下。</p><h4 id="2、加入预编译指令"><a href="#2、加入预编译指令" class="headerlink" title="2、加入预编译指令"></a>2、加入预编译指令</h4><p>新建一个pre.hpp的头文件，加入下面的预编译指令，不然编译的时候会报错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPILER_MSVC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOMINMAX</span></span><br></pre></td></tr></table></figure><h3 id="二、测试代码"><a href="#二、测试代码" class="headerlink" title="二、测试代码"></a>二、测试代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tensorflow/core/public/session.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tensorflow/core/platform/env.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tensorflow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief deep model for click through rate prediction</span></span><br><span class="line"><span class="comment"> * @details [long description]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param argv[1] graph protobuf</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Initialize a tensorflow session</span></span><br><span class="line">  Session* session;</span><br><span class="line">  Status status = NewSession(SessionOptions(), &amp;session);</span><br><span class="line">  <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; status.ToString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Session created successfully"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load the protobuf graph</span></span><br><span class="line">  GraphDef graph_def;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> graph_path = <span class="string">"/home/mod/桌面/tensorflow/tensorflow/tensorflow-cpp/graph.pb"</span>;</span><br><span class="line">  <span class="comment">// 读取pb文件</span></span><br><span class="line">  status = ReadBinaryProto(Env::Default(), graph_path, &amp;graph_def);</span><br><span class="line">  <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; status.ToString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Load graph protobuf successfully"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the graph to the session</span></span><br><span class="line">  status = session-&gt;Create(graph_def);</span><br><span class="line">  <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; status.ToString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Add graph to session successfully"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup inputs and outputs:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Our graph doesn't require any inputs, since it specifies default values,</span></span><br><span class="line">  <span class="comment">// but we'll change an input to demonstrate（演示）.</span></span><br><span class="line">  Tensor a(DT_FLOAT, TensorShape());</span><br><span class="line">  a.scalar&lt;<span class="keyword">float</span>&gt;()() = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">  Tensor b(DT_FLOAT, TensorShape());</span><br><span class="line">  b.scalar&lt;<span class="keyword">float</span>&gt;()() = <span class="number">11.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="built_in">string</span>, tensorflow::Tensor&gt;&gt; inputs = &#123;</span><br><span class="line">    &#123; <span class="string">"a"</span>, a &#125;,</span><br><span class="line">    &#123; <span class="string">"b"</span>, b &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The session will initialize the outputs</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;tensorflow::Tensor&gt; outputs;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the session, evaluating our "c" operation from the graph</span></span><br><span class="line">  status = session-&gt;Run(inputs, &#123;<span class="string">"c"</span>&#125;, &#123;&#125;, &amp;outputs);</span><br><span class="line">  <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; status.ToString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Run session successfully"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Grab the first output (we only evaluated one graph node: "c")</span></span><br><span class="line">  <span class="comment">// and convert the node to a scalar representation.</span></span><br><span class="line">  <span class="keyword">auto</span> output_c = outputs[<span class="number">0</span>].scalar&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (There are similar methods for vectors and matrices here:</span></span><br><span class="line">  <span class="comment">// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor.h)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the results</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; outputs[<span class="number">0</span>].DebugString() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Tensor&lt;type: float shape: [] values: 30&gt;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"output value: "</span> &lt;&lt; output_c() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Free any resources used by the session</span></span><br><span class="line">  session-&gt;Close();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在vs2017上编译tensorflow</title>
      <link href="/2018/10/05/tensorflow/%E5%9C%A8vs2017%E4%B8%8A%E7%BC%96%E8%AF%91tensorflow/"/>
      <url>/2018/10/05/tensorflow/%E5%9C%A8vs2017%E4%B8%8A%E7%BC%96%E8%AF%91tensorflow/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><h4 id="1、代码下载"><a href="#1、代码下载" class="headerlink" title="1、代码下载"></a>1、代码下载</h4><p>在tensorflow官网上克隆tensorflow-1.11版本的源码，进入tensorflow目录。(git clone tensorflow1.11)。代码一般clone，我发现如果我直接下载zip文件的话，在编译的时候会出现找不到.git的警告。</p><h4 id="2、安装相关的依赖包："><a href="#2、安装相关的依赖包：" class="headerlink" title="2、安装相关的依赖包："></a>2、安装相关的依赖包：</h4><pre><code>a、swig</code></pre><p>​        b、python35</p><p>​    c、cmake</p><p>​    d、abseil(这个在编译的时候本来会在动下载，但是我在tensorflow1.11版本的时候，会报错<u>找不到</u> </p><p><u>​        absl/strings/string_view.h</u>)</p><h4 id="3、编译abseil库。"><a href="#3、编译abseil库。" class="headerlink" title="3、编译abseil库。"></a>3、编译abseil库。</h4><p>为了解决在编译时找不到abseil想的办法。我在编译的时候，首先出现abseil目录的头文件找不到的情况，我在D:\programFiles\tensorflow\tensorflow\contrib\cmake\CMakeLists.txt中加入了包含头文件的代码：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(ABSL_PATH D:/programFiles/tensorflow/abseil-cpp)</span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(</span><br><span class="line">  <span class="variable">$&#123;ABSL_PATH&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>接着我在vs2017上编译的时候出现了<u>error LNK2019: 无法解析的外部符号</u>。我在网上查找资料后发现，不仅缺少的是头文件，源文件也没有被加入到其中。后来由于不知道原来大多数在该解决方案下的项目的编译都要依赖abseil，我在abseil的github上查找针对每一个缺少的函数源文件进行了添加，这样在每一个项目上的添加给我带来了巨大的工作量。所以我决定把abseil编译成lib文件添加到项目中，向该项目添加ascii.c、memutil.cc、raw_logging.cc、string_view.cc、throw_delegate.cc恰好abseil支持cmake的编译。absei的编译很简单，中途基本不会出错，就不说了，记得编译为Release版本就行。等abseil编译完成之后，通过以下命令将abseil的库文件添加到编译命令中。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(ABSL_LIB_PATH  D:/programFiles/tensorflow/abseil-cpp/build/absl)</span><br><span class="line"><span class="keyword">link_libraries</span>(</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/algorithm/Release/absl_algorithm.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/base/Release/absl_base.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/base/Release/absl_dynamic_annotations.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/base/Release/absl_malloc_internal.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/base/Release/absl_spinlock_wait.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/base/Release/absl_throw_delegate.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/container/Release/absl_container.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/container/Release/test_instance_tracker_lib.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_debugging.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_examine_stack.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_failure_signal_handler.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_leak_check.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_stacktrace.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_stack_consumption.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/debugging/Release/absl_symbolize.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/memory/Release/absl_memory.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/meta/Release/absl_meta.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/numeric/Release/absl_int128.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/numeric/Release/absl_numeric.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/strings/Release/absl_strings.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/strings/Release/absl_str_format.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/strings/Release/str_format_extension_internal.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/strings/Release/str_format_internal.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/synchronization/Release/absl_synchronization.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/time/Release/absl_time.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_any.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_bad_any_cast.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_bad_optional_access.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_optional.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_span.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/types/Release/absl_variant.lib</span><br><span class="line">  <span class="variable">$&#123;ABSL_LIB_PATH&#125;</span>/utility/Release/absl_utility.lib</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样也许不是最好的解决办法，但目前为止是解决了abseil找不到的问题。</p><h4 id="4、其他配置"><a href="#4、其他配置" class="headerlink" title="4、其他配置"></a>4、其他配置</h4><p>对一用cmake编译。无法通过./configure命令进行相关编译预选项的配置，所以如果要配置，需要修改CMakeLists.txt文件中的内容。下面的内容修改后，会在cmake的gui中出现这个编译的预选项，如果你需要相关的编译指令，你就必须把它勾选上。</p><p>a、CPU优化指令</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS  <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX2"</span>)</span><br><span class="line"><span class="keyword">if</span> (tensorflow_OPTIMIZE_FOR_NATIVE_ARCH)</span><br><span class="line">  <span class="keyword">include</span>(CheckCXXCompilerFlag)</span><br><span class="line">  CHECK_CXX_COMPILER_FLAG(<span class="string">"-march=native"</span> COMPILER_OPT_ARCH_NATIVE_SUPPORTED)</span><br><span class="line">  <span class="keyword">if</span> (COMPILER_OPT_ARCH_NATIVE_SUPPORTED)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; -march=native"</span>)</span><br><span class="line">  <span class="keyword">else</span>()</span><br><span class="line">    CHECK_CXX_COMPILER_FLAG(<span class="string">"/arch:AVX2"</span> COMPILER_OPT_ARCH_AVX_SUPPORTED)</span><br><span class="line">    <span class="keyword">if</span>(COMPILER_OPT_ARCH_AVX_SUPPORTED)</span><br><span class="line">      <span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"$&#123;CMAKE_CXX_FLAGS&#125; /arch:AVX2"</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>b、jemalloc</p><p>在内存管理上jemalloc更加优秀。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果为OFF改为ON</span></span><br><span class="line"><span class="keyword">option</span>(tensorflow_ENABLE_JEMALLOC_SUPPORT <span class="string">"Enable jemalloc support"</span> <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><p>c、生成tensorflow.lib与tensorflow.dll的选项。</p><p>下面的选项默认是关闭的，如果不打开则无法生成tensorflow的项目。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">option</span>(tensorflow_BUILD_SHARED_LIB <span class="string">"Build TensorFlow as a shared library"</span> <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><p>其他的指令就自行Google了。</p><h3 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h3><h4 id="1、cmake生成项目"><a href="#1、cmake生成项目" class="headerlink" title="1、cmake生成项目"></a>1、cmake生成项目</h4><p>建议用cmake的gui进行编译，因为这样在编译的时候可以进行上面编译选项的选定。也可以用下面的命令进行configure，不过编译指令选择不了。在configure的时候选择vs2017 win64 release版本。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -A x64 -DCMAKE_BUILD_TYPE=Release ^ -G<span class="string">"Visual Studio 15 2017 Win64"</span></span><br><span class="line">More? -DSWIG_EXECUTABLE=D:/programFiles/swig/swig.exe ^</span><br><span class="line">More?  -DPYTHON_EXECUTABLE=C:/Users/Yang/AppData/Local/Programs/Python/Python35/python.exe ^</span><br><span class="line">More? -DPYTHON_LIBRARIES=-DPYTHON_LIBRARIES=C:/Users/Yang/AppData/Local/Programs/Python/Python35/libs/python35.lib ^</span><br><span class="line">More? -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX</span><br></pre></td></tr></table></figure><p>generate后会在build目录下生成解决方案tensorflow.sln。用vs2017打开它，并切换为Release。</p><h4 id="2、修改bug"><a href="#2、修改bug" class="headerlink" title="2、修改bug"></a>2、修改bug</h4><p>我在生成库文件的时候出项了下面的错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error C2678: 二进制“*”: 没有找到接受“<span class="keyword">const</span> tensorflow::OpInputList::Iterator”类型的左操作数的运算符(或没有可接受的转换) (编译源文件 D:\programFiles\tf\tensorflow\tensorflow\core\kernels\data\optional_ops.cc)</span><br><span class="line"><span class="number">87</span>&gt;d:\programfiles\tf\tensorflow\tensorflow\core\framework\op_kernel.h(<span class="number">404</span>): note: 可能是“<span class="keyword">const</span> tensorflow::Tensor &amp;tensorflow::OpArgIterator&lt;tensorflow::OpInputList,<span class="keyword">const</span> tensorflow::Tensor&gt;::<span class="keyword">operator</span> *(<span class="keyword">void</span>)” (编译源文件 D:\programFiles\tf\tensorflow\tensorflow\core\kernels\data\optional_ops.cc)</span><br><span class="line"><span class="number">87</span>&gt;d:\program files\vs2017\vc\tools\msvc\<span class="number">14.14</span><span class="number">.26428</span>\include\xmemory(<span class="number">218</span>): note: 尝试匹配参数列表“(<span class="keyword">const</span> tensorflow::OpInputList::Iterator)”时 (编译源文件 D:\programFiles\tf\tensorflow\tensorflow\core\kernels\data\optional_ops.cc)</span><br><span class="line"><span class="number">87</span>&gt;d:\program files\vs2017\vc\tools\msvc\<span class="number">14.14</span><span class="number">.26428</span>\include\<span class="built_in">vector</span>(<span class="number">1922</span>): note: 参见对正在编译的函数 模板 实例化“_FwdIt *<span class="built_in">std</span>::_Uninitialized_copy&lt;_Iter,tensorflow::Tensor*,<span class="built_in">std</span>::allocator&lt;_Ty&gt;&gt;(<span class="keyword">const</span> _InIt,<span class="keyword">const</span> _InIt,_FwdIt,_Alloc &amp;)”的引用</span><br><span class="line"><span class="number">87</span>&gt;</span><br></pre></td></tr></table></figure><p>从上面的代码中，我发现OpInputList这个类下的重载没有“*”加const限定的重载，但是用const的变量使用了星的重载，导致发生错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reference <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> (*list_)[i_]; &#125;</span><br><span class="line"><span class="comment">// OpArgIterator的类中加入下面关于const的重载</span></span><br><span class="line">reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*list_)[i_]; &#125;</span><br></pre></td></tr></table></figure><h4 id="3、vs编译启动"><a href="#3、vs编译启动" class="headerlink" title="3、vs编译启动"></a>3、vs编译启动</h4><p>右键ALL_BUILD-》生成,一段时间后再build/Release目录下就会生成相应的lib与dll文件。</p>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从头开始学tensorflow-模型建立与读取</title>
      <link href="/2018/09/11/tensorflow/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%AD%A6tensorflow-%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B%E4%B8%8E%E8%AF%BB%E5%8F%96/"/>
      <url>/2018/09/11/tensorflow/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%AD%A6tensorflow-%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B%E4%B8%8E%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="从头开始学tensorflow"><a href="#从头开始学tensorflow" class="headerlink" title="从头开始学tensorflow"></a>从头开始学tensorflow</h1><pre><code>在这篇博客中，我们将要学习如何使用神经网络来为我们服务，然后使用python和tensorflow来实现这些事情。在这个例子中，我将会使用如下特征来预测一辆车的价格：行驶的公里数、车龄、燃油类型。我们将仅预测一款车型的价格，因为我们的特征中没有关于品牌或汽车型号的数据。我们使用的车的型号时BWM系列1，我的数据下载来源于 [leboncoin.fr]( https://www.leboncoin.fr/).</code></pre><p>​    我们训练好的模型因该不会太好用，因为影响汽车价格的重要因素我们不是很具备，但我们的最终目的是保持简单的同时可以达到学习的效果。</p><h2 id="一、数据的预处理"><a href="#一、数据的预处理" class="headerlink" title="一、数据的预处理"></a>一、数据的预处理</h2><p>​    第一步就是要归一化我们现有的数据，我们现在有的数据如下：</p><ul><li><p>定量的汽车行驶公里数，范围在0到350k之间。</p></li><li><p>燃料类型：二元数据柴油/汽油。</p></li><li><p>定量的车的年龄，范围在0到40之间。</p></li><li><p>定量车的价格，0到40k之间。</p><p>使用平均值和标准偏差将公里数和年龄（均为定量）标准化。 目标是将所有数据带到相同的比例，通常在【-6，6】之间，此外，公里数将达到35万，年龄可达40年，体重值的变化不会以同样的方式影响年龄或公里数。 规范化的公式是：</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow0</title>
      <link href="/2018/09/03/tensorflow/tensorflow%E5%9F%BA%E4%BA%8Elinux%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2018/09/03/tensorflow/tensorflow%E5%9F%BA%E4%BA%8Elinux%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="一、python"><a href="#一、python" class="headerlink" title="一、python"></a>一、python</h3><p>1、如果是使用python下的环境的话，建议使用Anaconda，它的安装是非常方便的，安装完之后。安装编译好的tensorflow安装包。安装包的下载地址为<a href="https://github.com/fo40225/tensorflow-windows-wheel" target="_blank" rel="noopener">tensorflow</a> .<br>2、下载完成之后到该安装包的目录，pip install 安装包名。<br>3、import tensorflow as tf 时可能会出现numpy的错误，可以重新安装numpy。</p><h3 id="二、C"><a href="#二、C" class="headerlink" title="二、C"></a>二、C</h3><p>1、tensorflow中有详细的教程。</p><h3 id="三、CPP"><a href="#三、CPP" class="headerlink" title="三、CPP"></a>三、CPP</h3><p>[binary] (<a href="https://github.com/kecsap/tensorflow_cpp_packaging/releases/tag/Tensorflow_1.10.0fix1_git20180810_56e4ea40）" target="_blank" rel="noopener">https://github.com/kecsap/tensorflow_cpp_packaging/releases/tag/Tensorflow_1.10.0fix1_git20180810_56e4ea40）</a></p><p>1、git clone tensorflow仓库<br>2、./configure<br>3、看网上的编译命令。<br>4、建议编译的机器内存为8G，不然编译的过程会出现中断问题。<br>5、在配置的过程中要配置AUX2，不然不能充分使用CPU的性能。</p>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/22/hello-world/"/>
      <url>/2018/08/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
